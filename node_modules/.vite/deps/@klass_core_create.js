import {
  c,
  f,
  s
} from "./chunk-A7EGTTQQ.js";
import {
  clsx
} from "./chunk-AJTCXCUR.js";
import "./chunk-LQ2VYIYD.js";

// node_modules/@klass/core/dist/create.js
var F = (h = {}) => {
  const { end: y = c } = h, k = (m, r) => {
    const f2 = s(m);
    return (i) => f2[i ?? r];
  };
  return (m) => {
    const { base: r, variants: f2, defaults: i, compounds: t } = m, e = clsx(r), s2 = [], o = {};
    let n;
    for (n in f2)
      s2.push(n), o[n] = k(f2[n], i == null ? void 0 : i[n]);
    let d;
    const c2 = [];
    if (d = !!(t == null ? void 0 : t.length))
      for (const [p, l] of t)
        c2.push({ v: p, c: clsx(l) });
    const a = (p, l) => {
      let u = e, g, v;
      for (v of s2)
        (g = o[v](p == null ? void 0 : p[v])) && (u && (u += " "), u += g);
      if (d)
        t:
          for (let C of c2) {
            for (v in C.v)
              if (((p == null ? void 0 : p[v]) ?? (i == null ? void 0 : i[v])) !== C.v[v])
                continue t;
            C.c && (u && (u += " "), u += C.c);
          }
      return typeof l < "u" && (g = clsx(l)) && (u && (u += " "), u += g), y(u);
    };
    return a.g = o, a.k = s2, a;
  };
};
var G = (h = {}) => {
  const { as: y = f, end: k = c } = h, m = (r, f2, i) => {
    const t = Object.keys(r), e = s(i), s2 = r[f2];
    return (o) => {
      let n;
      if (typeof o != "object")
        return typeof (n = e[o]) == "string" ? y(s2, n) : void 0;
      let d = "", c2;
      for (c2 of t)
        (n = c2 in o && y(r[c2], e[o[c2]])) && (d && (d += " "), d += n);
      return d;
    };
  };
  return (r) => {
    const {
      conditions: [f2, i],
      variants: t
    } = r, e = [], s2 = {};
    let o;
    for (o in t)
      e.push(o), s2[o] = m(f2, i, t[o]);
    const n = (d, c2) => {
      let a = "", p, l;
      for (p of e)
        (l = s2[p](d == null ? void 0 : d[p])) && (a && (a += " "), a += l);
      return typeof c2 < "u" && (l = clsx(c2)) && (a && (a += " "), a += l), k(a);
    };
    return n.g = s2, n.k = e, n;
  };
};
var A = (h = {}) => {
  const { end: y = c } = h;
  return (...k) => {
    const m = [];
    for (const f2 of k)
      m.push(...f2.k);
    const r = (f2, i) => {
      let t = "", e;
      for (const s2 of k)
        (e = s2(f2)) && (t && (t += " "), t += e);
      return typeof i < "u" && (e = clsx(i)) && (t && (t += " "), t += e), y(t);
    };
    return r.k = m, r;
  };
};
export {
  A as createCompose,
  F as createKlass,
  G as createReklass
};
//# sourceMappingURL=@klass_core_create.js.map
