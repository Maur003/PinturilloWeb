---
import LayoutTool from "@/layouts/LayoutTool.astro";
---

<LayoutTool title="Gartic | Board Player">
  
  <div id="field">
    <canvas id="canvas"></canvas>
    <div class="tools">
      <a href="/">
        <button type="button" class="button">Volver</button>
      </a>
      <button onclick="undo_last();" type="button" class="button">Deshacer</button>
      <button onclick="clear_canvas();" type="button" class="button">Limpiar</button>

      <div onclick="change_color(this);" class="color-field" style="background: red;"></div>
      <div onclick="change_color(this);" class="color-field" style="background: blue;"></div>
      <div onclick="change_color(this);" class="color-field" style="background: green;"></div>
      <div onclick="change_color(this);" class="color-field" style="background: yellow;"></div>

      <input oninput="draw_color = this.value;" 
            type="color" 
            class="color-picker" />

      <input type="range" 
            min="1" 
            max="100" 
            class="pen-range" 
            oninput="draw_width = this.value;"/>
    </div>
  </div>

</LayoutTool>

<script defer>
  const canvas = document.getElementById('canvas');
  canvas.width = window.innerWidth - 60;
  canvas.height = 500;

  let context = canvas.getContext("2d");
  let start_background_color = "white";
  context.fillStyle = start_background_color;
  context.fillRect(0, 0, canvas.width, canvas.height);

  let draw_color = "black";
  let draw_width = "2";
  let is_drawing = false;

  let restore_array = [];
  let index = -1;

  function change_color(element){
    draw_color = element.style.background;
  }

  canvas.addEventListener("touchstart", start, false);
  canvas.addEventListener("touchmove", draw, false);
  canvas.addEventListener("mousedown", start, false);
  canvas.addEventListener("mousemove", draw, false);

  canvas.addEventListener("touchend", stop, false);
  canvas.addEventListener("mouseup", stop, false);
  canvas.addEventListener("mouseout", stop, false);

  function start(event){
      is_drawing = true;
      context.beginPath();
      context.moveTo(event.clientX - canvas.offsetLeft, 
                    event.clientY - canvas.offsetTop);
      event.preventDefault();
  }

  function draw(event){
      if(is_drawing){
          context.lineTo(event.clientX - canvas.offsetLeft, 
                        event.clientY - canvas.offsetTop);
          context.strokeStyle = draw_color;
          context.lineWidth = draw_width;
          context.lineCap = "round";
          context.lineJoin = "round";
          context.stroke();
      }
      event.preventDefault();
  }

  function stop(event){
      if(is_drawing){
          context.stroke();
          context.closePath();
          is_drawing = false;
      }
      event.preventDefault();

      if(event.type != "mouseout"){
          restore_array.push(context.getImageData(0, 0, canvas.width, canvas.height));
          index += 1;
      }
  }

  function clear_canvas(){
    context.fillStyle = start_background_color;
    context.clearRect(0, 0, canvas.width, canvas.height);
    context.fillRect(0, 0, canvas.width, canvas.height);

    restore_array = [];
    index = -1;
  }

  function undo_last(){
    if(index <= 0){
      clear_canvas();
    } else {
      index -= 1;
      restore_array.pop();
      context.putImageData(restore_array[index], 0, 0);
    }
  }
</script>

<style>
  :root {
  }
  canvas {
    box-shadow: -3px 2px 9px 6px;
    cursor: pointer;
  }
  .tools {
    display: flex;
    justify-content: center;
    flex-direction: row;
    margin-top: 15px;
  }

  .tools .color-field {
    height: 40px;
    width: 40px;
    min-height: 40px;
    min-width: 40px;
    cursor: pointer;
    display: inline-block;
    box-sizing: border-box;
    border-radius: 50%;
    border: 2px solid white;
    align-self: center;
    margin: 0 15px;
  }

  .tools .button {
    align-self: center;
    width: 100px;
    height: 40px;
    border: 2px solid white;
    cursor: pointer;
    color: white;
    background: #222;
    font-weight: bold;
    margin: 0 15px;
  }

  .color-picker {
    align-self: center;
    margin: 0 10px;
    height: 50px;
  }

  .pen-range {
    align-self: center;
    margin: 0 10px;
  }
</style>
